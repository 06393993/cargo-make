
[config]
init_task = "init"
end_task = "end"

[env]
RUST_BACKTRACE = "full"
KCOV_VERSION = "33"

[tasks.default]
description = "Default task points to the development testing flow"
dependencies = [
    "dev-test-flow"
]

[tasks.ci-flow]
description = "CI task will run cargo build and cargo test with verbose output"
dependencies = [
    "pre-ci-flow",
    "pre-build",
    "build-verbose",
    "post-build",
    "pre-test",
    "test-verbose",
    "post-test",
    "ci-coverage-flow",
    "post-ci-flow"
]

[tasks.workspace-ci-flow]
description = "CI task will run CI flow for each member and merge coverage reports"
dependencies = [
    "pre-workspace-ci-flow",
    "workspace-members-ci",
    "workspace-coverage",
    "post-workspace-ci-flow"
]

[tasks.dev-test-flow]
description = "Development testing flow will first format the code, and than run cargo build and test"
dependencies = [
    "format-flow",
    "pre-build",
    "build",
    "post-build",
    "pre-test",
    "test",
    "post-test"
]

[tasks.publish-flow]
description = "Publish flow - First clean the target directory of any old leftovers, package and publish"
dependencies = [
    "pre-clean",
    "clean",
    "post-clean",
    "pre-publish",
    "publish",
    "post-publish"
]

[tasks.build-flow]
# This is the full sanity testing flow which includes:
# cleanup of old build
# generating docs and moving them to the docs folder
# running cargo build and test
# running cargo plugins such as security and dependency validations
description = "Full sanity testing flow."
dependencies = [
    "init-build-flow",
    "pre-clean",
    "clean-apidocs",
    "clean",
    "post-clean",
    "format-flow",
    "pre-build",
    "build",
    "post-build",
    "pre-test",
    "test",
    "post-test",
    "pre-verify-project",
    "verify-project",
    "post-verify-project",
    "pre-audit",
    "audit",
    "post-audit",
    "pre-outdated",
    "outdated",
    "post-outdated",
    "pre-docs",
    "docs",
    "post-docs",
    "copy-apidocs",
    "end-build-flow"
]

[tasks.empty]
description = "Empty Task"

[tasks.init]

[tasks.end]

[tasks.init-build-flow]

[tasks.pre-clean]

[tasks.clean-apidocs]
description = "Delete API docs."
command = "rm"
args = ["-Rf", "./docs/api"]

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.post-clean]

[tasks.pre-format]

[tasks.format]
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--", "--write-mode=overwrite"]

[tasks.post-format]

[tasks.format-flow]
dependencies = [
    "pre-format",
    "format",
    "post-format"
]

[tasks.pre-docs]

[tasks.docs]
command = "cargo"
args = ["doc", "--no-deps"]

[tasks.post-docs]

[tasks.pre-build]

[tasks.build]
command = "cargo"
args = ["build"]

[tasks.build-verbose]
command = "cargo"
args = ["build", "--verbose"]

[tasks.post-build]

[tasks.pre-test]

[tasks.test]
command = "cargo"
args = ["test"]

[tasks.test-verbose]
command = "cargo"
args = ["test", "--verbose"]

[tasks.post-test]

[tasks.pre-bench]

[tasks.bench]
command = "cargo"
args = ["bench"]

[tasks.post-bench]

[tasks.bench-flow]
dependencies = [
    "pre-bench",
    "bench",
    "post-bench"
]

[tasks.pre-verify-project]

[tasks.verify-project]
command = "cargo"
args = ["verify-project"]

[tasks.post-verify-project]

[tasks.pre-audit]

[tasks.audit]
install_crate = "cargo-audit"
command = "cargo"
args = ["audit"]

[tasks.post-audit]

[tasks.pre-outdated]

[tasks.outdated]
install_crate = "cargo-outdated"
command = "cargo"
args = ["outdated", "--root-deps-only", "--exit-code", "1"]

[tasks.post-outdated]

[tasks.clippy]
install_crate = "clippy"
command = "cargo"
args = ["clippy"]

[tasks.copy-apidocs]
script = [
    "mkdir -p ./docs/api",
    "mv ./target/doc/* ./docs/api"
]

[tasks.end-build-flow]

[tasks.pre-package]

[tasks.package]
command = "cargo"
args = ["package"]

[tasks.post-package]

[tasks.pre-publish]

[tasks.publish]
command = "cargo"
args = ["publish"]

[tasks.post-publish]

[tasks.pre-git-add]

[tasks.git-add]
command = "git"
args = ["add", "."]

[tasks.post-git-add]

[tasks.pre-git-status]

[tasks.git-status]
command = "git"
args = ["status"]

[tasks.post-git-status]

[tasks.pre-git-commit]

[tasks.git-commit]
command = "git"
args = ["commit"]

[tasks.git-commit-message]
script = [
    "git commit -m \"$COMMIT_MSG\""
]

[tasks.post-git-commit]

[tasks.pre-git-push]

[tasks.git-push]
command = "git"
args = ["push"]

[tasks.post-git-push]

[tasks.pre-ci-flow]

[tasks.post-ci-flow]

[tasks.pre-workspace-ci-flow]

[tasks.post-workspace-ci-flow]

[tasks.workspace-members-ci]
script = [
'''
#prevent codecov publish in member builds
export CARGO_MAKE_SKIP_CODECOV="true"

export CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY="${CARGO_MAKE_WORKING_DIRECTORY}/target"

#output coverage data goes into workspace level
export CARGO_MAKE_COVERAGE_REPORT_DIRECTORY="${CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY}/coverage"

cargo make --loglevel=${CARGO_MAKE_LOG_LEVEL} ci-flow

unset CARGO_MAKE_COVERAGE_REPORT_DIRECTORY
unset CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY
unset CARGO_MAKE_SKIP_CODECOV
'''
]

[tasks.workspace-members-ci.windows]
script = [
    "cargo make --loglevel=%CARGO_MAKE_LOG_LEVEL% ci-flow"
]

[tasks.workspace-coverage]
linux_alias = "codecov"

[tasks.pre-coverage]

[tasks.coverage]
alias = "coverage-kcov"

[tasks.coverage-kcov]
description = "Installs (if missing) and runs coverage using kcov (not supported on windows)"
windows_alias = "empty"
install_script = [
'''
command -v kcov >/dev/null 2>&1 || {
    if [ -n "$KCOV_VERSION" ]; then
        if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
            sudo apt-get update || true
            sudo apt-get install -y libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev

            wget https://github.com/SimonKagstrom/kcov/archive/v$KCOV_VERSION.zip
            unzip v$KCOV_VERSION.zip
            cd kcov-$KCOV_VERSION
            mkdir build
            cd ./build
            cmake ..
            make
            sudo make install
            cd ../..
            rm -rf kcov-$KCOV_VERSION
        fi
    fi
}
'''
]
script = [
'''
echo "Working Directory: ${CARGO_MAKE_WORKING_DIRECTORY}"

TARGET_DIRECTORY="target/coverage"
if [ -n "$CARGO_MAKE_COVERAGE_REPORT_DIRECTORY" ]; then
    TARGET_DIRECTORY="$CARGO_MAKE_COVERAGE_REPORT_DIRECTORY"
    mkdir -p ${TARGET_DIRECTORY}
else
    mkdir -p ./target/coverage
fi

BINARY_DIRECTORY=target/debug/deps
if [ -n "$CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY" ]; then
    BINARY_DIRECTORY="${CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY}/debug/deps"
fi

echo "Running unit tests from directory: ${BINARY_DIRECTORY}"
for file in ${BINARY_DIRECTORY}/${CARGO_MAKE_CRATE_FS_NAME}*
do
    if "$file" ; then
        echo "Running file: $file"
        kcov --include-pattern=${CARGO_MAKE_WORKING_DIRECTORY}/src/ "$TARGET_DIRECTORY" "$file" || true
    fi
done

echo "Running integration tests from directory: ${BINARY_DIRECTORY}"
for file in ${BINARY_DIRECTORY}/test_*
do
    if "$file" ; then
        echo "Running file: $file"
        kcov --include-pattern=${CARGO_MAKE_WORKING_DIRECTORY}/src/ "$TARGET_DIRECTORY" "$file" || true
    fi
done
'''
]

[tasks.coverage-lcov]
description = "WARNING, ONLY INSTALLS LCOV. ACTUAL COVERAGE IS CURRENTLY NOT IMPLEMENTED!!!"
windows_alias = "empty"
install_script = [
'''
command -v lcov >/dev/null 2>&1 || {
    git clone https://github.com/linux-test-project/lcov.git
    cd lcov
    sudo make install
    cd ..
    rm -Rf ./lcov
}
'''
]
script = [
'''
echo "Not Implemented."
exit 1
'''
]

[tasks.coverage-tarpaulin]
description = "Runs coverage using tarpaulin rust crate (linux only)"

[tasks.coverage-tarpaulin.linux]
install_crate = "cargo-tarpaulin"
command = "cargo"
args = ["tarpaulin"]

[tasks.post-coverage]

[tasks.coverage-flow]
description = "Runs the full coverage flow."
dependencies = [
    "pre-coverage",
    "coverage",
    "post-coverage"
]

[tasks.codecov]
windows_alias = "empty"
script_runner = "bash"
script = [
    "#!/usr/bin/env bash",
    "if [ -z \"$CARGO_MAKE_SKIP_CODECOV\" ]; then",
    "bash <(curl -s https://codecov.io/bash)",
    "fi"
]

[tasks.codecov-flow]
description = "Runs the full coverage flow and uploads the results to codecov."
windows_alias = "empty"
dependencies = [
    "coverage-flow",
    "codecov"
]

[tasks.ci-coverage-flow]
windows_alias = "empty"
script = [
'''
if [ "$TRAVIS" = "true" ]; then
    if [ "$CARGO_MAKE_RUN_CODECOV" = "true" ]; then
        cargo make --loglevel=${CARGO_MAKE_LOG_LEVEL} codecov-flow
    fi
fi
'''
]
